name: Build

on:
  # 手動実行
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release
      platform:
        description: 'Target platform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - linux-x86_64
          - linux-aarch64
          - android-aarch64
          - macos-x86_64
          - macos-aarch64
          - windows-x86_64
          - windows-aarch64
      rust_version:
        description: 'Rust version'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - beta
          - nightly
      clear_cache:
        description: 'Clear cache before build'
        required: false
        default: false
        type: boolean
  
  # プッシュ時の自動実行
  push:
    branches:
      - main
      - develop
    paths:
      - 'codex-rs/**'
      - '.github/workflows/build.yml'
  
  # PR時の自動実行
  pull_request:
    branches:
      - main
    paths:
      - 'codex-rs/**'
      - '.github/workflows/build.yml'
  

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # プラットフォーム選択ジョブ
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      build_mode: ${{ steps.set-vars.outputs.build_mode }}
      rust_version: ${{ steps.set-vars.outputs.rust_version }}
    steps:
      - id: set-vars
        run: |
          # workflow_dispatchの場合はinputsを使用、それ以外はデフォルト値
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "build_mode=${{ inputs.build_mode }}" >> $GITHUB_OUTPUT
            echo "rust_version=${{ inputs.rust_version }}" >> $GITHUB_OUTPUT
          else
            echo "build_mode=release" >> $GITHUB_OUTPUT
            echo "rust_version=stable" >> $GITHUB_OUTPUT
          fi
      
      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.platform }}" != "all" ]; then
            case "${{ inputs.platform }}" in
              linux-x86_64)
                matrix='{"include":[{"os":"ubuntu-latest","target":"x86_64-unknown-linux-gnu","platform":"linux-x86_64"}]}'
                ;;
              linux-aarch64)
                matrix='{"include":[{"os":"ubuntu-latest","target":"aarch64-unknown-linux-gnu","platform":"linux-aarch64"}]}'
                ;;
              android-aarch64)
                matrix='{"include":[{"os":"ubuntu-latest","target":"aarch64-linux-android","platform":"android-aarch64"}]}'
                ;;
              macos-x86_64)
                matrix='{"include":[{"os":"macos-latest","target":"x86_64-apple-darwin","platform":"macos-x86_64"}]}'
                ;;
              macos-aarch64)
                matrix='{"include":[{"os":"macos-latest","target":"aarch64-apple-darwin","platform":"macos-aarch64"}]}'
                ;;
              windows-x86_64)
                matrix='{"include":[{"os":"windows-latest","target":"x86_64-pc-windows-msvc","platform":"windows-x86_64"}]}'
                ;;
              windows-aarch64)
                matrix='{"include":[{"os":"windows-latest","target":"aarch64-pc-windows-msvc","platform":"windows-aarch64"}]}'
                ;;
            esac
          else
            # 全プラットフォーム
            matrix='{"include":[{"os":"ubuntu-latest","target":"x86_64-unknown-linux-gnu","platform":"linux-x86_64"},{"os":"ubuntu-latest","target":"aarch64-unknown-linux-gnu","platform":"linux-aarch64"},{"os":"ubuntu-latest","target":"aarch64-linux-android","platform":"android-aarch64"},{"os":"macos-latest","target":"x86_64-apple-darwin","platform":"macos-x86_64"},{"os":"macos-latest","target":"aarch64-apple-darwin","platform":"macos-aarch64"},{"os":"windows-latest","target":"x86_64-pc-windows-msvc","platform":"windows-x86_64"},{"os":"windows-latest","target":"aarch64-pc-windows-msvc","platform":"windows-aarch64"}]}'
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  # ビルドジョブ
  build:
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    
    steps:
      - name: Free disk space (Ubuntu/Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Before cleanup:"
          df -h

          # Remove unnecessary pre-installed software to free up disk space
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

          # Clean up apt cache
          sudo apt-get clean

          # Remove Docker images (not needed for Rust builds)
          docker rmi $(docker images -q) 2>/dev/null || true

          echo "After cleanup:"
          df -h

      - name: Free disk space (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Before cleanup:"
          Get-PSDrive C | Select-Object Used,Free

          # Remove unnecessary pre-installed software
          Remove-Item -Recurse -Force "C:\hostedtoolcache\windows" -ErrorAction SilentlyContinue

          Write-Host "After cleanup:"
          Get-PSDrive C | Select-Object Used,Free

      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust (Unix)
        if: matrix.target != 'aarch64-linux-android' && matrix.os != 'windows-latest'
        run: |
          echo "Installing Rust toolchain for target: ${{ matrix.target }}"
          rustup toolchain install ${{ needs.setup.outputs.rust_version }}
          rustup default ${{ needs.setup.outputs.rust_version }}
          rustup target add ${{ matrix.target }}
          rustup show
      
      - name: Setup Rust (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          echo "Installing Rust toolchain for target: ${{ matrix.target }}"
          rustup toolchain install ${{ needs.setup.outputs.rust_version }}
          rustup default ${{ needs.setup.outputs.rust_version }}
          rustup target add ${{ matrix.target }}
          rustup show
      
      - name: Setup Rust (Android)
        if: matrix.target == 'aarch64-linux-android'
        run: |
          rustup toolchain install ${{ needs.setup.outputs.rust_version }}
          rustup default ${{ needs.setup.outputs.rust_version }}
      
      - name: Install Linux ARM64 cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: Install Android NDK for ARM64
        if: matrix.target == 'aarch64-linux-android'
        run: |
          # Android NDK r26c for API level 28 (Android 9.0) - Better OpenSSL compatibility
          NDK_VERSION="26.3.11579264"
          ANDROID_API_LEVEL="28"
          
          # Install Android SDK command-line tools
          sudo apt-get update
          sudo apt-get install -y wget unzip
          
          # Download and install Android NDK
          mkdir -p $HOME/android-ndk
          cd $HOME/android-ndk
          wget -q https://dl.google.com/android/repository/android-ndk-r26c-linux.zip
          unzip -q android-ndk-r26c-linux.zip
          
          # Set up environment variables
          export ANDROID_NDK_HOME=$HOME/android-ndk/android-ndk-r26c
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_HOME" >> $GITHUB_ENV
          
          # Set up Rust Android target
          rustup target add aarch64-linux-android
          
          # Set environment variables for Android cross-compilation
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "PATH=$PATH:$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_ENV
          
          # Set CC and AR for proper cross-compilation
          echo "CC_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${ANDROID_API_LEVEL}-clang" >> $GITHUB_ENV
          echo "CXX_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${ANDROID_API_LEVEL}-clang++" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${ANDROID_API_LEVEL}-clang" >> $GITHUB_ENV
          echo "RANLIB=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib" >> $GITHUB_ENV
          
          # Use vendored OpenSSL for Android instead of prebuilt
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          
          # Install dependencies for vendored OpenSSL build
          sudo apt-get update && sudo apt-get install -y perl make
      
      - name: Cache cleanup (Unix)
        if: github.event_name == 'workflow_dispatch' && inputs.clear_cache == true && matrix.os != 'windows-latest'
        run: |
          rm -rf ~/.cargo/registry/index
          rm -rf ~/.cargo/registry/cache
          rm -rf ~/.cargo/git
          rm -rf target
      
      - name: Cache cleanup (Windows)
        if: github.event_name == 'workflow_dispatch' && inputs.clear_cache == true && matrix.os == 'windows-latest'
        shell: cmd
        run: |
          if exist "%USERPROFILE%\.cargo\registry\index" rmdir /s /q "%USERPROFILE%\.cargo\registry\index"
          if exist "%USERPROFILE%\.cargo\registry\cache" rmdir /s /q "%USERPROFILE%\.cargo\registry\cache"
          if exist "%USERPROFILE%\.cargo\git" rmdir /s /q "%USERPROFILE%\.cargo\git"
          if exist "target" rmdir /s /q "target"
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-v2-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-v2-
      
      - name: Cache cargo target (Unix/macOS)
        if: matrix.os != 'windows-latest'
        uses: actions/cache@v4
        with:
          path: codex-rs/target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-target-v3-${{ needs.setup.outputs.build_mode }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-target-v3-${{ needs.setup.outputs.build_mode }}-
            ${{ runner.os }}-${{ matrix.target }}-cargo-target-v3-
      
      - name: Cache cargo target (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: |
            codex-rs/target/*/build
            codex-rs/target/*/deps
            codex-rs/target/*/examples
            codex-rs/target/*/native
            !codex-rs/target/**/*.pdb
            !codex-rs/target/**/incremental
            !codex-rs/target/**/deps/*.pdb
            !codex-rs/target/**/deps/*.exp
            !codex-rs/target/**/deps/*.lib
            !codex-rs/target/**/examples/*.pdb
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-target-v3-${{ needs.setup.outputs.build_mode }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-target-v3-${{ needs.setup.outputs.build_mode }}-
            ${{ runner.os }}-${{ matrix.target }}-cargo-target-v3-
      
      - name: Build (Unix)
        if: matrix.os != 'windows-latest'
        working-directory: codex-rs
        run: |
          # Debug: Show installed targets
          echo "Installed Rust targets:"
          rustup +${{ needs.setup.outputs.rust_version }} target list --installed
          echo "Current toolchain:"
          rustup show
          
          # Show environment for Android debugging
          if [ "${{ matrix.target }}" = "aarch64-linux-android" ]; then
            echo "Android build environment:"
            echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME"
            echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT"
            echo "CC_aarch64_linux_android=$CC_aarch64_linux_android"
            echo "OPENSSL_STATIC=$OPENSSL_STATIC"
            echo "cargo-ndk version:"
            cargo ndk --version || echo "cargo-ndk not found"
          fi
          
          # Ensure the target is installed (redundant but safe)
          rustup +${{ needs.setup.outputs.rust_version }} target add ${{ matrix.target }} || true
          
          if [ "${{ needs.setup.outputs.build_mode }}" = "release" ]; then
            cargo +${{ needs.setup.outputs.rust_version }} build --release --target ${{ matrix.target }} --workspace
          else
            cargo +${{ needs.setup.outputs.rust_version }} build --target ${{ matrix.target }} --workspace
          fi
      
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: codex-rs
        shell: cmd
        run: |
          echo Installing target for Windows build
          rustup target add ${{ matrix.target }}
          if "${{ needs.setup.outputs.build_mode }}" == "release" (
            cargo build --release --target ${{ matrix.target }} --workspace
          ) else (
            cargo build --target ${{ matrix.target }} --workspace
          )
      
      - name: Run tests (Unix - native only)
        if: |
          matrix.os != 'windows-latest' && 
          matrix.target != 'aarch64-unknown-linux-gnu' && 
          matrix.target != 'aarch64-linux-android' && 
          matrix.target != 'aarch64-apple-darwin' &&
          matrix.target != 'x86_64-apple-darwin'
        working-directory: codex-rs
        run: |
          # Skip mcp-server tests temporarily due to known issues
          cargo test --target ${{ matrix.target }} --workspace --exclude codex-mcp-server
      
      - name: Skip tests for Linux ARM64 (cross-compilation)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "Skipping tests for Linux ARM64 cross-compilation target"
          echo "Tests cannot be run on x86_64 host for ARM64 binaries"
      
      - name: Skip tests for Android ARM64 (cross-compilation)
        if: matrix.target == 'aarch64-linux-android'
        run: |
          echo "Skipping tests for Android ARM64 cross-compilation target"
          echo "Tests cannot be run on x86_64 host for Android ARM64 binaries"
      
      - name: Skip tests for macOS ARM64 (cross-compilation)
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          echo "Skipping tests for macOS ARM64 cross-compilation target"
          echo "Tests cannot be run on x86_64 host for ARM64 binaries"
      
      - name: Skip tests for macOS x86_64 (cross-compilation on Apple Silicon)
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          echo "Skipping tests for macOS x86_64 cross-compilation target"
          echo "Tests cannot be run on ARM64 host for x86_64 binaries without Rosetta"
      
      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest' && matrix.target != 'aarch64-pc-windows-msvc'
        working-directory: codex-rs
        shell: pwsh
        run: |
          cargo test --target ${{ matrix.target }} --workspace --exclude codex-mcp-server
      
      - name: Skip tests for Windows ARM64 (cross-compilation)
        if: matrix.os == 'windows-latest' && matrix.target == 'aarch64-pc-windows-msvc'
        run: |
          echo "Skipping tests for Windows ARM64 cross-compilation target"
          echo "Tests cannot be run on x86_64 host for ARM64 binaries"
      
      - name: Prepare artifacts (Unix)
        if: matrix.os != 'windows-latest'
        working-directory: codex-rs
        run: |
          mkdir -p artifacts
          if [ "${{ needs.setup.outputs.build_mode }}" = "release" ]; then
            BUILD_DIR="target/${{ matrix.target }}/release"
          else
            BUILD_DIR="target/${{ matrix.target }}/debug"
          fi
          
          # バイナリをコピー
          cp $BUILD_DIR/codex artifacts/ 2>/dev/null || true
          cp $BUILD_DIR/codex-exec artifacts/ 2>/dev/null || true
          cp $BUILD_DIR/codex-tui artifacts/ 2>/dev/null || true
          
          # アーカイブ作成
          cd artifacts
          tar czf ../codex-${{ matrix.platform }}-${{ needs.setup.outputs.build_mode }}.tar.gz *
      
      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: codex-rs
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts
          if ("${{ needs.setup.outputs.build_mode }}" -eq "release") {
            $BUILD_DIR = "target\${{ matrix.target }}\release"
          } else {
            $BUILD_DIR = "target\${{ matrix.target }}\debug"
          }
          
          # バイナリをコピー
          Copy-Item "$BUILD_DIR\codex.exe" artifacts\ -ErrorAction SilentlyContinue
          Copy-Item "$BUILD_DIR\codex-exec.exe" artifacts\ -ErrorAction SilentlyContinue
          Copy-Item "$BUILD_DIR\codex-tui.exe" artifacts\ -ErrorAction SilentlyContinue
          
          # アーカイブ作成
          Compress-Archive -Path artifacts\* -DestinationPath codex-${{ matrix.platform }}-${{ needs.setup.outputs.build_mode }}.zip
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: codex-${{ matrix.platform }}-${{ needs.setup.outputs.build_mode }}
          path: |
            codex-rs/codex-*.tar.gz
            codex-rs/codex-*.zip
          retention-days: 7
      
      - name: Display build info
        run: |
          echo "Build completed successfully!"
          echo "Platform: ${{ matrix.platform }}"
          echo "Target: ${{ matrix.target }}"
          echo "Build mode: ${{ needs.setup.outputs.build_mode }}"
          echo "Rust version: ${{ needs.setup.outputs.rust_version }}"

  # サマリージョブ
  summary:
    needs: [setup, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Mode**: ${{ needs.setup.outputs.build_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust Version**: ${{ needs.setup.outputs.rust_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Build artifacts are available in the Actions tab for download." >> $GITHUB_STEP_SUMMARY