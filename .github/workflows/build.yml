name: Build

on:
  # 手動実行
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release
      platform:
        description: 'Target platform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - linux-x86_64
          - linux-aarch64
          - macos-x86_64
          - macos-aarch64
          - windows-x86_64
          - windows-aarch64
      rust_version:
        description: 'Rust version'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - beta
          - nightly
      clear_cache:
        description: 'Clear cache before build'
        required: false
        default: false
        type: boolean
  
  # プッシュ時の自動実行
  push:
    branches:
      - main
      - develop
    paths:
      - 'codex-rs/**'
      - '.github/workflows/build.yml'
  
  # PR時の自動実行
  pull_request:
    branches:
      - main
    paths:
      - 'codex-rs/**'
      - '.github/workflows/build.yml'
  
  # 定期実行（毎日深夜2時 UTC）
  schedule:
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # プラットフォーム選択ジョブ
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      build_mode: ${{ steps.set-vars.outputs.build_mode }}
      rust_version: ${{ steps.set-vars.outputs.rust_version }}
    steps:
      - id: set-vars
        run: |
          # workflow_dispatchの場合はinputsを使用、それ以外はデフォルト値
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "build_mode=${{ inputs.build_mode }}" >> $GITHUB_OUTPUT
            echo "rust_version=${{ inputs.rust_version }}" >> $GITHUB_OUTPUT
          else
            echo "build_mode=release" >> $GITHUB_OUTPUT
            echo "rust_version=stable" >> $GITHUB_OUTPUT
          fi
      
      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.platform }}" != "all" ]; then
            case "${{ inputs.platform }}" in
              linux-x86_64)
                matrix='{"include":[{"os":"ubuntu-latest","target":"x86_64-unknown-linux-gnu","platform":"linux-x86_64"}]}'
                ;;
              linux-aarch64)
                matrix='{"include":[{"os":"ubuntu-latest","target":"aarch64-unknown-linux-gnu","platform":"linux-aarch64","use_cross":true}]}'
                ;;
              macos-x86_64)
                matrix='{"include":[{"os":"macos-latest","target":"x86_64-apple-darwin","platform":"macos-x86_64"}]}'
                ;;
              macos-aarch64)
                matrix='{"include":[{"os":"macos-latest","target":"aarch64-apple-darwin","platform":"macos-aarch64"}]}'
                ;;
              windows-x86_64)
                matrix='{"include":[{"os":"windows-latest","target":"x86_64-pc-windows-msvc","platform":"windows-x86_64"}]}'
                ;;
              windows-aarch64)
                matrix='{"include":[{"os":"windows-latest","target":"aarch64-pc-windows-msvc","platform":"windows-aarch64"}]}'
                ;;
            esac
          else
            # 全プラットフォーム - Linux ARM64は一時的に除外
            matrix='{"include":[{"os":"ubuntu-latest","target":"x86_64-unknown-linux-gnu","platform":"linux-x86_64"},{"os":"macos-latest","target":"x86_64-apple-darwin","platform":"macos-x86_64"},{"os":"macos-latest","target":"aarch64-apple-darwin","platform":"macos-aarch64"},{"os":"windows-latest","target":"x86_64-pc-windows-msvc","platform":"windows-x86_64"},{"os":"windows-latest","target":"aarch64-pc-windows-msvc","platform":"windows-aarch64"}]}'
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  # ビルドジョブ
  build:
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.setup.outputs.rust_version }}
          target: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.use_cross == true
        run: |
          # Install cross from the latest release for better compatibility
          cargo install cross --version 0.2.5
      
      - name: Cache cleanup
        if: github.event_name == 'workflow_dispatch' && inputs.clear_cache == true
        run: |
          rm -rf ~/.cargo/registry/index
          rm -rf ~/.cargo/registry/cache
          rm -rf ~/.cargo/git
          rm -rf target
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache cargo target
        uses: actions/cache@v4
        with:
          path: codex-rs/target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-target-${{ needs.setup.outputs.build_mode }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-target-${{ needs.setup.outputs.build_mode }}-
            ${{ runner.os }}-${{ matrix.target }}-cargo-target-
      
      - name: Build (native - Unix)
        if: matrix.use_cross != true && matrix.os != 'windows-latest'
        working-directory: codex-rs
        run: |
          if [ "${{ needs.setup.outputs.build_mode }}" = "release" ]; then
            cargo build --release --target ${{ matrix.target }} --workspace
          else
            cargo build --target ${{ matrix.target }} --workspace
          fi
      
      - name: Build (native - Windows)
        if: matrix.use_cross != true && matrix.os == 'windows-latest'
        working-directory: codex-rs
        shell: cmd
        run: |
          if "${{ needs.setup.outputs.build_mode }}" == "release" (
            cargo build --release --target ${{ matrix.target }} --workspace
          ) else (
            cargo build --target ${{ matrix.target }} --workspace
          )
      
      - name: Build (cross)
        if: matrix.use_cross == true
        working-directory: codex-rs
        run: |
          # Skip Linux ARM64 cross-compilation due to OpenSSL issues
          # This can be re-enabled once OpenSSL dependencies are resolved
          echo "Skipping Linux ARM64 cross-compilation temporarily due to OpenSSL dependency issues"
          echo "To build for ARM64, use native ARM64 runners or resolve OpenSSL linking"
          exit 0
      
      - name: Run tests (native only)
        if: matrix.use_cross != true && matrix.os != 'windows-latest'
        working-directory: codex-rs
        run: |
          cargo test --target ${{ matrix.target }} --workspace
      
      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest' && matrix.target != 'aarch64-pc-windows-msvc'
        working-directory: codex-rs
        shell: pwsh
        run: |
          cargo test --target ${{ matrix.target }} --workspace
      
      - name: Skip tests for Windows ARM64 (cross-compilation)
        if: matrix.os == 'windows-latest' && matrix.target == 'aarch64-pc-windows-msvc'
        run: |
          echo "Skipping tests for Windows ARM64 cross-compilation target"
          echo "Tests cannot be run on x86_64 host for ARM64 binaries"
      
      - name: Prepare artifacts (Unix)
        if: matrix.os != 'windows-latest'
        working-directory: codex-rs
        run: |
          mkdir -p artifacts
          if [ "${{ needs.setup.outputs.build_mode }}" = "release" ]; then
            BUILD_DIR="target/${{ matrix.target }}/release"
          else
            BUILD_DIR="target/${{ matrix.target }}/debug"
          fi
          
          # バイナリをコピー
          cp $BUILD_DIR/codex artifacts/ 2>/dev/null || true
          cp $BUILD_DIR/codex-exec artifacts/ 2>/dev/null || true
          cp $BUILD_DIR/codex-tui artifacts/ 2>/dev/null || true
          
          # アーカイブ作成
          cd artifacts
          tar czf ../codex-${{ matrix.platform }}-${{ needs.setup.outputs.build_mode }}.tar.gz *
      
      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: codex-rs
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts
          if ("${{ needs.setup.outputs.build_mode }}" -eq "release") {
            $BUILD_DIR = "target\${{ matrix.target }}\release"
          } else {
            $BUILD_DIR = "target\${{ matrix.target }}\debug"
          }
          
          # バイナリをコピー
          Copy-Item "$BUILD_DIR\codex.exe" artifacts\ -ErrorAction SilentlyContinue
          Copy-Item "$BUILD_DIR\codex-exec.exe" artifacts\ -ErrorAction SilentlyContinue
          Copy-Item "$BUILD_DIR\codex-tui.exe" artifacts\ -ErrorAction SilentlyContinue
          
          # アーカイブ作成
          Compress-Archive -Path artifacts\* -DestinationPath codex-${{ matrix.platform }}-${{ needs.setup.outputs.build_mode }}.zip
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: codex-${{ matrix.platform }}-${{ needs.setup.outputs.build_mode }}
          path: |
            codex-rs/codex-*.tar.gz
            codex-rs/codex-*.zip
          retention-days: 7
      
      - name: Display build info
        run: |
          echo "Build completed successfully!"
          echo "Platform: ${{ matrix.platform }}"
          echo "Target: ${{ matrix.target }}"
          echo "Build mode: ${{ needs.setup.outputs.build_mode }}"
          echo "Rust version: ${{ needs.setup.outputs.rust_version }}"

  # サマリージョブ
  summary:
    needs: [setup, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Mode**: ${{ needs.setup.outputs.build_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust Version**: ${{ needs.setup.outputs.rust_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Build artifacts are available in the Actions tab for download." >> $GITHUB_STEP_SUMMARY